name: Test DBKB Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx pytest-cov

    - name: Run unit tests
      run: |
        # Test imports
        python -c "
        import sys
        sys.path.append('.')
        
        try:
            from app import app
            print('✅ FastAPI app imported successfully')
        except Exception as e:
            print(f'❌ App import failed: {e}')
            sys.exit(1)
            
        try:
            import boto3
            print('✅ Boto3 imported successfully')
        except Exception as e:
            print(f'❌ Boto3 import failed: {e}')
            sys.exit(1)
        "

    - name: Test FastAPI endpoints (mock)
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from fastapi.testclient import TestClient
        from app import app
        
        client = TestClient(app)
        
        # Test health endpoint
        response = client.get('/health')
        assert response.status_code == 200
        print('✅ Health endpoint test passed')
        
        # Test that query endpoint exists (will fail without KB but structure is valid)
        response = client.post('/query', json={'query_text': 'test'})
        # We expect this to fail due to no KB connection, but should not be 404
        assert response.status_code != 404
        print('✅ Query endpoint structure test passed')
        "

  test-docker-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t dbkb-test .

    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name dbkb-test -p 8000:8000 \
          -e KNOWLEDGE_BASE_ID=test \
          -e AWS_DEFAULT_REGION=us-east-1 \
          dbkb-test
        
        # Wait for startup
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        echo "✅ Docker health check passed"
        
        # Clean up
        docker stop dbkb-test
        docker rm dbkb-test

  test-ui:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Test UI components
      run: |
        cd src/ui
        
        # Check that HTML is valid
        echo "Checking HTML validity..."
        if ! command -v tidy &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y tidy
        fi
        
        # Basic HTML validation (allowing HTML5)
        tidy -errors -quiet index.html || echo "HTML has some warnings but is parseable"
        
        # Check that JavaScript has no syntax errors
        echo "Checking JavaScript syntax..."
        node -c db-knowledge-assistant.js
        echo "✅ JavaScript syntax check passed"
        
        # Check that the web component is properly defined
        node -e "
        const fs = require('fs');
        const content = fs.readFileSync('db-knowledge-assistant.js', 'utf8');
        if (!content.includes('customElements.define')) {
          console.error('❌ Web component not properly defined');
          process.exit(1);
        }
        if (!content.includes('class DBKnowledgeAssistant') && !content.includes('class DB')) {
          console.error('❌ Component class not found');
          process.exit(1);
        }
        console.log('✅ Web component structure verified');
        "

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run security scan on Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
        
        # Check for known security vulnerabilities
        safety check -r requirements.txt --json || echo "Security scan completed with warnings"

    - name: Scan Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        failure-threshold: error

    - name: Check for secrets in code
      run: |
        # Basic check for common secret patterns
        echo "Checking for potential secrets..."
        
        # Check for AWS keys (should not be in code)
        if grep -r "AKIA[0-9A-Z]{16}" . --exclude-dir=.git --exclude-dir=node_modules; then
          echo "❌ Potential AWS access key found in code"
          exit 1
        fi
        
        # Check for common secret patterns
        if grep -r "password.*=" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" | grep -v "placeholder\|example\|YOUR_PASSWORD"; then
          echo "⚠️ Potential password found in code"
        fi
        
        echo "✅ Basic security scan completed"
